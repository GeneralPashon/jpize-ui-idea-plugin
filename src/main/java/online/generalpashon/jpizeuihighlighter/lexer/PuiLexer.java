// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: PuiLexer.flex

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package online.generalpashon.jpizeuihighlighter.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import online.generalpashon.jpizeuihighlighter.lexer.PuiTypes;
import com.intellij.psi.TokenType;


class PuiLexer implements FlexLexer{

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_COMPONENT = 2;
  public static final int WAITING_OPEN_BRACKET = 4;
  public static final int WAITING_CLOSE_BRACKET = 6;
  public static final int WAITING_VALUE = 8;
  public static final int COMPONENT = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\1\1\4\1\5"+
    "\1\6\3\0\1\7\1\10\1\11\1\0\1\12\1\13"+
    "\1\12\1\14\1\15\12\16\1\17\5\0\1\20\4\21"+
    "\1\22\25\21\1\15\1\23\1\15\1\0\1\24\1\0"+
    "\1\25\1\21\1\26\1\21\1\27\2\21\1\30\4\21"+
    "\1\31\1\32\1\33\1\34\1\21\1\35\1\21\1\36"+
    "\1\37\1\21\1\40\1\41\1\21\1\42\1\43\1\0"+
    "\1\44\7\0\1\3\32\0\1\1\11\0\1\21\12\0"+
    "\1\21\4\0\1\21\5\0\27\21\1\0\37\21\1\0"+
    "\u01ca\21\4\0\14\21\16\0\5\21\7\0\1\21\1\0"+
    "\1\21\21\0\165\21\1\0\2\21\2\0\4\21\1\0"+
    "\1\21\6\0\1\21\1\0\3\21\1\0\1\21\1\0"+
    "\24\21\1\0\123\21\1\0\213\21\1\0\255\21\1\0"+
    "\46\21\2\0\1\21\6\0\51\21\10\0\55\21\1\0"+
    "\1\21\1\0\2\21\1\0\2\21\1\0\1\21\10\0"+
    "\33\21\4\0\4\21\35\0\13\21\5\0\112\21\4\0"+
    "\146\21\1\0\10\21\2\0\12\21\1\0\23\21\2\0"+
    "\1\21\20\0\73\21\2\0\145\21\16\0\66\21\4\0"+
    "\1\21\2\0\1\21\2\0\56\21\22\0\34\21\4\0"+
    "\13\21\65\0\25\21\1\0\10\21\25\0\17\21\1\0"+
    "\201\21\2\0\12\21\1\0\23\21\1\0\10\21\2\0"+
    "\2\21\2\0\26\21\1\0\7\21\1\0\1\21\3\0"+
    "\4\21\2\0\11\21\2\0\2\21\2\0\4\21\10\0"+
    "\1\21\4\0\2\21\1\0\5\21\2\0\14\21\12\0"+
    "\1\21\1\0\1\21\2\0\3\21\1\0\6\21\4\0"+
    "\2\21\2\0\26\21\1\0\7\21\1\0\2\21\1\0"+
    "\2\21\1\0\2\21\2\0\1\21\1\0\5\21\4\0"+
    "\2\21\2\0\3\21\3\0\1\21\7\0\4\21\1\0"+
    "\1\21\7\0\20\21\13\0\3\21\1\0\11\21\1\0"+
    "\3\21\1\0\26\21\1\0\7\21\1\0\2\21\1\0"+
    "\5\21\2\0\12\21\1\0\3\21\1\0\3\21\2\0"+
    "\1\21\17\0\4\21\2\0\12\21\11\0\7\21\1\0"+
    "\3\21\1\0\10\21\2\0\2\21\2\0\26\21\1\0"+
    "\7\21\1\0\2\21\1\0\5\21\2\0\11\21\2\0"+
    "\2\21\2\0\3\21\10\0\2\21\4\0\2\21\1\0"+
    "\5\21\2\0\12\21\1\0\1\21\20\0\2\21\1\0"+
    "\6\21\3\0\3\21\1\0\4\21\3\0\2\21\1\0"+
    "\1\21\1\0\2\21\3\0\2\21\3\0\3\21\3\0"+
    "\14\21\4\0\5\21\3\0\3\21\1\0\4\21\2\0"+
    "\1\21\6\0\1\21\16\0\12\21\20\0\15\21\1\0"+
    "\3\21\1\0\27\21\1\0\20\21\3\0\10\21\1\0"+
    "\3\21\1\0\4\21\7\0\2\21\1\0\3\21\5\0"+
    "\4\21\2\0\12\21\20\0\4\21\1\0\10\21\1\0"+
    "\3\21\1\0\27\21\1\0\12\21\1\0\5\21\2\0"+
    "\11\21\1\0\3\21\1\0\4\21\7\0\2\21\7\0"+
    "\1\21\1\0\4\21\2\0\12\21\1\0\2\21\15\0"+
    "\4\21\1\0\10\21\1\0\3\21\1\0\63\21\1\0"+
    "\3\21\1\0\5\21\5\0\4\21\7\0\5\21\2\0"+
    "\12\21\12\0\6\21\2\0\2\21\1\0\22\21\3\0"+
    "\30\21\1\0\11\21\1\0\1\21\2\0\7\21\3\0"+
    "\1\21\4\0\6\21\1\0\1\21\1\0\10\21\6\0"+
    "\12\21\2\0\2\21\15\0\72\21\5\0\17\21\1\0"+
    "\12\21\47\0\2\21\1\0\1\21\1\0\5\21\1\0"+
    "\30\21\1\0\1\21\1\0\27\21\2\0\5\21\1\0"+
    "\1\21\1\0\6\21\2\0\12\21\2\0\4\21\40\0"+
    "\1\21\27\0\2\21\6\0\12\21\13\0\1\21\1\0"+
    "\1\21\1\0\1\21\4\0\12\21\1\0\44\21\4\0"+
    "\24\21\1\0\22\21\1\0\44\21\11\0\1\21\71\0"+
    "\112\21\6\0\116\21\2\0\46\21\1\0\1\21\5\0"+
    "\1\21\2\0\53\21\1\0\115\21\1\0\4\21\2\0"+
    "\7\21\1\0\1\21\1\0\4\21\2\0\51\21\1\0"+
    "\4\21\2\0\41\21\1\0\4\21\2\0\7\21\1\0"+
    "\1\21\1\0\4\21\2\0\17\21\1\0\71\21\1\0"+
    "\4\21\2\0\103\21\2\0\3\21\40\0\20\21\20\0"+
    "\126\21\2\0\6\21\3\0\u016c\21\2\0\21\21\1\1"+
    "\32\21\5\0\113\21\3\0\13\21\7\0\15\21\1\0"+
    "\7\21\13\0\25\21\13\0\24\21\14\0\15\21\1\0"+
    "\3\21\1\0\2\21\14\0\124\21\3\0\1\21\4\0"+
    "\2\21\2\0\12\21\41\0\3\21\2\0\12\21\6\0"+
    "\131\21\7\0\53\21\5\0\106\21\12\0\37\21\1\0"+
    "\14\21\4\0\14\21\12\0\50\21\2\0\5\21\13\0"+
    "\54\21\4\0\32\21\6\0\12\21\46\0\34\21\4\0"+
    "\77\21\1\0\35\21\2\0\13\21\6\0\12\21\15\0"+
    "\1\21\10\0\17\21\101\0\114\21\4\0\12\21\21\0"+
    "\11\21\14\0\164\21\14\0\70\21\10\0\12\21\3\0"+
    "\61\21\2\0\11\21\7\0\53\21\2\0\3\21\20\0"+
    "\3\21\1\0\47\21\5\0\372\21\1\0\33\21\2\0"+
    "\6\21\2\0\46\21\2\0\6\21\2\0\10\21\1\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\37\21\2\0"+
    "\65\21\1\0\7\21\1\0\1\21\3\0\3\21\1\0"+
    "\7\21\3\0\4\21\2\0\6\21\4\0\15\21\5\0"+
    "\3\21\1\0\7\21\3\0\13\1\35\0\2\3\5\0"+
    "\1\1\17\0\2\21\23\0\1\21\12\0\1\1\21\0"+
    "\1\21\15\0\1\21\20\0\15\21\63\0\41\21\21\0"+
    "\1\21\4\0\1\21\2\0\12\21\1\0\1\21\3\0"+
    "\5\21\6\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\4\21\1\0\13\21\2\0\4\21\5\0\5\21\4\0"+
    "\1\21\21\0\51\21\u022d\0\64\21\26\0\57\21\1\0"+
    "\57\21\1\0\205\21\6\0\11\21\14\0\46\21\1\0"+
    "\1\21\5\0\1\21\2\0\70\21\7\0\1\21\17\0"+
    "\30\21\11\0\7\21\1\0\7\21\1\0\7\21\1\0"+
    "\7\21\1\0\7\21\1\0\7\21\1\0\7\21\1\0"+
    "\7\21\1\0\40\21\57\0\1\21\320\0\1\1\4\0"+
    "\3\21\31\0\17\21\1\0\5\21\2\0\5\21\4\0"+
    "\126\21\2\0\2\21\2\0\3\21\1\0\132\21\1\0"+
    "\4\21\5\0\53\21\1\0\136\21\21\0\33\21\65\0"+
    "\306\21\112\0\360\21\20\0\215\21\103\0\56\21\2\0"+
    "\15\21\3\0\34\21\24\0\63\21\1\0\12\21\1\0"+
    "\163\21\45\0\11\21\2\0\147\21\2\0\65\21\2\0"+
    "\5\21\60\0\61\21\30\0\64\21\14\0\106\21\12\0"+
    "\12\21\6\0\30\21\3\0\1\21\1\0\61\21\2\0"+
    "\44\21\14\0\35\21\3\0\101\21\16\0\13\21\6\0"+
    "\37\21\1\0\67\21\11\0\16\21\2\0\12\21\6\0"+
    "\27\21\3\0\111\21\30\0\3\21\2\0\20\21\2\0"+
    "\5\21\12\0\6\21\2\0\6\21\2\0\6\21\11\0"+
    "\7\21\1\0\7\21\1\0\53\21\1\0\14\21\10\0"+
    "\173\21\1\0\2\21\2\0\12\21\6\0\244\21\14\0"+
    "\27\21\4\0\61\21\4\0\u0100\45\156\21\2\0\152\21"+
    "\46\0\7\21\14\0\5\21\5\0\14\21\1\0\15\21"+
    "\1\0\5\21\1\0\1\21\1\0\2\21\1\0\2\21"+
    "\1\0\154\21\41\0\153\21\22\0\100\21\2\0\66\21"+
    "\50\0\14\21\4\0\20\21\20\0\20\21\3\0\2\21"+
    "\30\0\3\21\40\0\5\21\1\0\207\21\23\0\12\21"+
    "\7\0\32\21\4\0\1\21\1\0\32\21\13\0\131\21"+
    "\3\0\6\21\2\0\6\21\2\0\6\21\2\0\3\21"+
    "\43\0\14\21\1\0\32\21\1\0\23\21\1\0\2\21"+
    "\1\0\17\21\2\0\16\21\42\0\173\21\105\0\65\21"+
    "\210\0\1\21\202\0\35\21\3\0\61\21\17\0\1\21"+
    "\37\0\40\21\15\0\36\21\5\0\53\21\5\0\36\21"+
    "\2\0\44\21\4\0\10\21\1\0\5\21\52\0\236\21"+
    "\2\0\12\21\6\0\44\21\4\0\44\21\4\0\50\21"+
    "\10\0\64\21\234\0\67\21\11\0\26\21\12\0\10\21"+
    "\230\0\6\21\2\0\1\21\1\0\54\21\1\0\2\21"+
    "\3\0\1\21\2\0\27\21\12\0\27\21\11\0\37\21"+
    "\101\0\23\21\1\0\2\21\12\0\26\21\12\0\32\21"+
    "\106\0\70\21\6\0\2\21\100\0\4\21\1\0\2\21"+
    "\5\0\10\21\1\0\3\21\1\0\35\21\2\0\3\21"+
    "\4\0\1\21\40\0\35\21\3\0\35\21\43\0\10\21"+
    "\1\0\36\21\31\0\66\21\12\0\26\21\12\0\23\21"+
    "\15\0\22\21\156\0\111\21\67\0\63\21\15\0\63\21"+
    "\15\0\50\21\10\0\12\21\306\0\35\21\12\0\1\21"+
    "\10\0\41\21\217\0\27\21\11\0\107\21\37\0\12\21"+
    "\17\0\74\21\25\0\31\21\7\0\12\21\6\0\65\21"+
    "\1\0\12\21\4\0\3\21\11\0\44\21\2\0\1\21"+
    "\11\0\105\21\4\0\4\21\3\0\13\21\1\0\1\21"+
    "\43\0\22\21\1\0\45\21\6\0\1\21\101\0\7\21"+
    "\1\0\1\21\1\0\4\21\1\0\17\21\1\0\12\21"+
    "\7\0\73\21\5\0\12\21\6\0\4\21\1\0\10\21"+
    "\2\0\2\21\2\0\26\21\1\0\7\21\1\0\2\21"+
    "\1\0\5\21\1\0\12\21\2\0\2\21\2\0\3\21"+
    "\2\0\1\21\6\0\1\21\5\0\7\21\2\0\7\21"+
    "\3\0\5\21\213\0\113\21\5\0\12\21\4\0\2\21"+
    "\40\0\106\21\1\0\1\21\10\0\12\21\246\0\66\21"+
    "\2\0\11\21\27\0\6\21\42\0\101\21\3\0\1\21"+
    "\13\0\12\21\46\0\71\21\7\0\12\21\66\0\33\21"+
    "\2\0\17\21\4\0\12\21\306\0\73\21\145\0\112\21"+
    "\25\0\1\21\240\0\10\21\2\0\56\21\2\0\10\21"+
    "\1\0\2\21\33\0\77\21\10\0\1\21\10\0\112\21"+
    "\3\0\1\21\42\0\71\21\7\0\11\21\1\0\55\21"+
    "\1\0\11\21\17\0\12\21\30\0\36\21\2\0\26\21"+
    "\1\0\16\21\111\0\7\21\1\0\2\21\1\0\54\21"+
    "\3\0\1\21\1\0\2\21\1\0\11\21\10\0\12\21"+
    "\6\0\6\21\1\0\2\21\1\0\45\21\1\0\2\21"+
    "\1\0\6\21\7\0\12\21\u0136\0\27\21\11\0\232\21"+
    "\146\0\157\21\21\0\304\21\274\0\57\21\321\0\107\21"+
    "\271\0\71\21\7\0\37\21\1\0\12\21\146\0\36\21"+
    "\2\0\5\21\13\0\67\21\11\0\4\21\14\0\12\21"+
    "\11\0\25\21\5\0\23\21\260\0\100\21\200\0\113\21"+
    "\4\0\71\21\7\0\21\21\100\0\2\21\1\0\1\21"+
    "\34\0\370\21\10\0\363\21\15\0\37\21\61\0\3\21"+
    "\21\0\4\21\10\0\u018c\21\4\0\153\21\5\0\15\21"+
    "\3\0\11\21\7\0\12\21\3\0\2\21\306\0\5\21"+
    "\3\0\6\21\10\0\10\21\2\0\7\21\36\0\4\21"+
    "\224\0\3\21\273\0\125\21\1\0\107\21\1\0\2\21"+
    "\2\0\1\21\2\0\2\21\2\0\4\21\1\0\14\21"+
    "\1\0\1\21\1\0\7\21\1\0\101\21\1\0\4\21"+
    "\2\0\10\21\1\0\7\21\1\0\34\21\1\0\4\21"+
    "\1\0\5\21\1\0\1\21\3\0\7\21\1\0\u0154\21"+
    "\2\0\31\21\1\0\31\21\1\0\37\21\1\0\31\21"+
    "\1\0\37\21\1\0\31\21\1\0\37\21\1\0\31\21"+
    "\1\0\37\21\1\0\31\21\1\0\10\21\2\0\151\21"+
    "\4\0\62\21\10\0\1\21\16\0\1\21\26\0\5\21"+
    "\1\0\17\21\120\0\7\21\1\0\21\21\2\0\7\21"+
    "\1\0\2\21\1\0\5\21\325\0\55\21\3\0\16\21"+
    "\2\0\12\21\4\0\1\21\u0171\0\72\21\6\0\305\21"+
    "\13\0\7\21\51\0\114\21\4\0\12\21\246\0\4\21"+
    "\1\0\33\21\1\0\2\21\1\0\1\21\2\0\1\21"+
    "\1\0\12\21\1\0\4\21\1\0\1\21\1\0\1\21"+
    "\6\0\1\21\4\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\3\21\1\0\2\21\1\0\1\21\2\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\2\21\1\0\1\21\2\0\4\21\1\0\7\21"+
    "\1\0\4\21\1\0\4\21\1\0\1\21\1\0\12\21"+
    "\1\0\21\21\5\0\3\21\1\0\5\21\1\0\21\21"+
    "\164\0\32\21\6\0\32\21\6\0\32\21\166\0\327\21"+
    "\51\0\65\21\13\0\336\21\2\0\u0182\21\16\0\u0131\21"+
    "\37\0\36\21\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\1\1\7\7\1\1\10\1\11\1\12\1\0"+
    "\1\13\1\3\2\0\1\14\6\0\1\15\7\0\1\16"+
    "\1\7\1\16\7\0\1\7\2\0\1\7\11\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[65];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\46"+
    "\0\46\0\46\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8"+
    "\0\u01ee\0\u0214\0\u023a\0\46\0\46\0\162\0\230\0\46"+
    "\0\46\0\344\0\u010a\0\46\0\u017c\0\u01a2\0\u0260\0\u0286"+
    "\0\u02ac\0\u02d2\0\u0156\0\u02f8\0\u031e\0\u0344\0\u036a\0\u0390"+
    "\0\u03b6\0\u03dc\0\u017c\0\u0402\0\46\0\u0428\0\u044e\0\u0474"+
    "\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e\0\u050c"+
    "\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae"+
    "\0\u06d4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[65];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\13\1\2\1\14\1\2\1\15\2\16"+
    "\1\17\1\16\1\20\3\16\1\21\6\16\1\22\1\16"+
    "\1\23\1\24\1\25\1\2\47\0\3\3\56\0\1\26"+
    "\1\0\2\26\1\0\2\26\1\0\17\26\4\0\3\27"+
    "\1\0\1\30\2\0\3\27\1\0\4\27\1\0\24\27"+
    "\1\0\2\6\1\0\1\31\41\6\1\31\1\0\3\32"+
    "\3\0\1\30\3\32\1\0\4\32\1\0\24\32\15\0"+
    "\1\33\1\0\1\33\1\34\1\0\2\35\1\36\1\35"+
    "\1\37\6\35\1\40\1\41\5\35\17\0\1\42\1\0"+
    "\1\14\1\34\1\0\2\35\1\36\1\35\1\37\6\35"+
    "\1\40\1\41\5\35\17\0\1\43\1\0\1\43\2\0"+
    "\2\43\1\0\17\43\17\0\1\35\1\0\1\35\1\34"+
    "\1\0\2\35\1\0\17\35\17\0\1\36\1\0\1\36"+
    "\4\0\1\36\1\0\1\44\6\0\1\45\1\46\24\0"+
    "\1\35\1\0\1\35\1\34\1\0\2\35\1\0\13\35"+
    "\1\47\3\35\17\0\1\35\1\0\1\35\1\34\1\0"+
    "\2\35\1\0\1\35\1\50\15\35\17\0\1\35\1\0"+
    "\1\35\1\34\1\0\2\35\1\0\11\35\1\51\5\35"+
    "\17\0\1\35\1\0\1\35\1\34\1\0\2\35\1\0"+
    "\3\35\1\52\13\35\17\0\1\35\1\0\1\35\1\34"+
    "\1\0\2\35\1\0\10\35\1\53\6\35\17\0\1\35"+
    "\1\0\1\35\1\34\1\0\2\35\1\0\15\35\1\53"+
    "\1\35\17\0\1\35\1\0\1\35\1\34\1\0\2\35"+
    "\1\0\4\35\1\53\7\35\1\53\2\35\17\0\1\33"+
    "\1\0\1\54\1\34\1\0\2\35\1\36\1\35\1\37"+
    "\6\35\1\40\1\41\5\35\37\0\1\55\52\0\1\55"+
    "\34\0\1\55\7\0\1\55\21\0\1\35\1\0\1\35"+
    "\1\34\1\0\2\35\1\0\12\35\1\56\4\35\17\0"+
    "\1\35\1\0\1\35\1\34\1\0\2\35\1\0\12\35"+
    "\1\57\4\35\17\0\1\35\1\0\1\35\1\34\1\0"+
    "\2\35\1\0\1\35\1\60\15\35\17\0\1\35\1\0"+
    "\1\35\1\34\1\0\2\35\1\0\11\35\1\56\5\35"+
    "\17\0\1\33\1\0\1\54\1\34\1\0\1\35\1\61"+
    "\1\36\1\35\1\37\1\35\1\61\4\35\1\40\1\41"+
    "\5\35\17\0\1\35\1\0\1\35\1\34\1\0\2\35"+
    "\1\0\7\35\1\53\7\35\17\0\1\35\1\0\1\35"+
    "\1\34\1\0\2\35\1\0\2\35\1\62\14\35\17\0"+
    "\1\35\1\0\1\35\1\34\1\0\2\35\1\0\10\35"+
    "\1\63\6\35\15\0\1\64\1\0\1\35\1\0\1\65"+
    "\1\34\1\0\2\35\1\0\17\35\17\0\1\35\1\0"+
    "\1\35\1\34\1\0\2\35\1\0\4\35\1\66\12\35"+
    "\17\0\1\35\1\0\1\35\1\34\1\0\2\35\1\0"+
    "\1\67\16\35\21\0\1\70\43\0\1\35\1\0\1\65"+
    "\1\34\1\0\2\35\1\0\17\35\17\0\1\35\1\0"+
    "\1\35\1\34\1\0\2\35\1\0\1\71\16\35\17\0"+
    "\1\35\1\0\1\35\1\34\1\0\2\35\1\0\2\35"+
    "\1\72\14\35\17\0\1\35\1\0\1\35\1\34\1\0"+
    "\2\35\1\0\10\35\1\73\6\35\17\0\1\35\1\0"+
    "\1\35\1\34\1\0\2\35\1\0\7\35\1\74\7\35"+
    "\17\0\1\35\1\0\1\35\1\34\1\0\2\35\1\0"+
    "\1\35\1\75\15\35\17\0\1\35\1\0\1\35\1\34"+
    "\1\0\2\35\1\0\6\35\1\76\10\35\17\0\1\35"+
    "\1\0\1\35\1\34\1\0\2\35\1\0\11\35\1\77"+
    "\5\35\17\0\1\35\1\0\1\35\1\34\1\0\2\35"+
    "\1\0\12\35\1\77\4\35\17\0\1\35\1\0\1\35"+
    "\1\34\1\0\2\35\1\0\3\35\1\100\13\35\17\0"+
    "\1\35\1\0\1\35\1\34\1\0\2\35\1\0\6\35"+
    "\1\101\10\35\17\0\1\35\1\0\1\35\1\34\1\0"+
    "\2\35\1\0\12\35\1\53\4\35\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1786];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\3\11\11\1\2\11\1\1\1\0"+
    "\2\11\2\0\1\11\6\0\1\1\7\0\2\1\1\11"+
    "\7\0\1\1\2\0\1\1\11\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[65];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PuiLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 15: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 16: break;
          case 3:
            { return PuiTypes.COMMENT;
            }
          // fall through
          case 17: break;
          case 4:
            { return PuiTypes.OPEN_BRACE;
            }
          // fall through
          case 18: break;
          case 5:
            { return PuiTypes.CLOSE_BRACE;
            }
          // fall through
          case 19: break;
          case 6:
            { return PuiTypes.COMMA;
            }
          // fall through
          case 20: break;
          case 7:
            { return PuiTypes.NUMBER;
            }
          // fall through
          case 21: break;
          case 8:
            { return PuiTypes.OPEN_BRACKET;
            }
          // fall through
          case 22: break;
          case 9:
            { return PuiTypes.CLOSE_BRACKET;
            }
          // fall through
          case 23: break;
          case 10:
            { return PuiTypes.RESOURCE;
            }
          // fall through
          case 24: break;
          case 11:
            { return PuiTypes.LITERAL;
            }
          // fall through
          case 25: break;
          case 12:
            { return PuiTypes.KEY;
            }
          // fall through
          case 26: break;
          case 13:
            { return PuiTypes.COMPONENT;
            }
          // fall through
          case 27: break;
          case 14:
            { return PuiTypes.CONSTRAINT;
            }
          // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
